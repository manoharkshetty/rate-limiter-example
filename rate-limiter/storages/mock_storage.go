// Code generated by mockery v1.0.0. DO NOT EDIT.

package storages

import mock "github.com/stretchr/testify/mock"

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: user, timeStamp, expireTime
func (_m *MockStorage) Add(user string, timeStamp int64, expireTime int64) error {
	ret := _m.Called(user, timeStamp, expireTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(user, timeStamp, expireTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastRequestTimeInWindow provides a mock function with given fields: user, timeStamp
func (_m *MockStorage) GetLastRequestTimeInWindow(user string, timeStamp int64) (int64, error) {
	ret := _m.Called(user, timeStamp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(user, timeStamp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(user, timeStamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestCountInWindow provides a mock function with given fields: user, timeStamp
func (_m *MockStorage) GetRequestCountInWindow(user string, timeStamp int64) (int64, error) {
	ret := _m.Called(user, timeStamp)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(user, timeStamp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(user, timeStamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
