// Code generated by mockery v1.0.0. DO NOT EDIT.

package rate_limiter

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockRateLimiter is an autogenerated mock type for the RateLimiter type
type MockRateLimiter struct {
	mock.Mock
}

// IsLimitReached provides a mock function with given fields: ctx, requester
func (_m *MockRateLimiter) IsLimitReached(ctx context.Context, requester string) (bool, int64) {
	ret := _m.Called(ctx, requester)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, requester)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, requester)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// IsLimitReachedOnClient provides a mock function with given fields: ctx, clientIP, requester
func (_m *MockRateLimiter) IsLimitReachedOnClient(ctx context.Context, clientIP string, requester string) (bool, int64) {
	ret := _m.Called(ctx, clientIP, requester)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, clientIP, requester)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, string) int64); ok {
		r1 = rf(ctx, clientIP, requester)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}
